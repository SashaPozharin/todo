{"version":3,"sources":["components/List.js","components/App.js","index.js"],"names":["List","props","items","itemList","map","item","index","className","text","onClick","deleteTodo","App","state","localStorage","getItem","JSON","parse","addTodo","bind","e","preventDefault","form","target","newTodo","todoInput","value","this","setState","newState","push","alert","setItem","stringify","todoIndex","parentNode","childNodes","innerHTML","splice","id","onSubmit","name","type","placeholder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kMAkBmBA,MAlBnB,SAAcC,GAGV,IAAIC,EAAQD,EAAME,SAASC,KAAI,SAACC,EAAMC,GAGlC,OAAO,sBAAKC,UAAU,MAAf,UACP,uBAAMA,UAAU,QAAhB,UAAyBD,EAAM,EAA/B,OACA,qBAAKC,UAAU,QAAf,SAAwBF,EAAKG,OAC7B,mBAAGC,QAASR,EAAMS,WAAYH,UAAU,iCAM5C,OAHA,8BACKL,KCoEMS,E,kDA1Eb,WAAYV,GAAO,IAAD,8BAEhB,cAAMA,IAGDW,MAAQ,CACXV,MAAuC,MAAhCW,aAAaC,QAAQ,SAAkBC,KAAKC,MAAMH,aAAaC,QAAQ,UAAY,CAAC,CAAC,KAAQ,sJAGtG,EAAKG,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKR,WAAa,EAAKA,WAAWQ,KAAhB,gBAVF,E,oDAaVC,GAENA,EAAEC,iBAEF,IAAIC,EAAOF,EAAEG,OACTC,EAAUF,EAAKG,UAAUC,MAI7BC,KAAKC,UAAU,SAACf,GAEd,IAAIgB,EAAWhB,EAOf,MALgB,KAAZW,EACFK,EAAS1B,MAAM2B,KAAK,CAACrB,KAAMe,IAEvBO,MAAM,2DACZjB,aAAakB,QAAQ,QAAShB,KAAKiB,UAAUJ,EAAS1B,QAC/C,CAAC0B,eAGZP,EAAKG,UAAUC,MAAQ,K,iCAIZN,GAET,IAAIc,EAAYd,EAAEG,OAAOY,WAAWC,WAAW,GAAGC,UAGlDV,KAAKC,UAAS,SAACf,GACb,IAAIgB,EAAWhB,EACXV,EAAQ0B,EAAS1B,MAIrB,OAHAA,EAAMmC,OAAOJ,EAAU,EAAE,GACzBL,EAAS1B,MAAQA,EACjBW,aAAakB,QAAQ,QAAShB,KAAKiB,UAAUJ,EAAS1B,QAC/C,CAAC0B,iB,+BAsBV,OAfA,sBAAKU,GAAG,YAAY/B,UAAU,eAA9B,UACE,qBAAKA,UAAU,6BAAf,SACE,qBAAKA,UAAU,QAAf,SACE,uBAAMA,UAAU,MAAMgC,SAAUb,KAAKT,QAArC,UACE,uBAAOuB,KAAK,YAAYC,KAAK,OAAOlC,UAAU,mBAAmBmC,YAAY,wEAC7E,wBAAQD,KAAK,SAASlC,UAAU,uBAAhC,2BAIN,qBAAKA,UAAU,6BAAf,SACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAMJ,SAAUuB,KAAKd,MAAMV,MAAOQ,WAAYgB,KAAKhB,wB,GArE3CiC,IAAMC,WCDxBC,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,W","file":"static/js/main.da620b36.chunk.js","sourcesContent":["function List(props) { \r\n\r\n    //<div>N) text 😊</div>\r\n    let items = props.itemList.map((item, index)=>{\r\n        //1. Купить молоко (иконка)\r\n\r\n        return <div className='row'>\r\n        <span className='col-1'>{index+1}.</span> \r\n        <div className=\"col-9\">{item.text}</div> \r\n        <i onClick={props.deleteTodo} className=\"bi bi-trash-fill col-1\"></i></div>\r\n    })\r\n    let elem =\r\n    <div >\r\n        {items}\r\n    </div>\r\n    return elem\r\n    }\r\n    \r\n    export default List;","import React from \"react\"\n\nimport List from \"./List\"\n\n//React-Component - это основной объект Приложения\nclass App extends React.Component{\n  //Функция которая настраивает REact-Component\n  constructor(props){\n    //Передаем основуню настрнойку в библиотеку React \n    super(props)\n\n    //Создаем параметры, которые должны хранится в памяти  !приложения!\n    this.state = {\n      items: localStorage.getItem(\"items\") !=null ? JSON.parse(localStorage.getItem(\"items\")) : [{\"text\": \"Выбери дело! (можешь удалить)\"}]\n    }\n    //Подключаем к Event-функции функцию Компонента\n    this.addTodo = this.addTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n  }\n  //ивент функция во время события submit для добавления нового делать\n  addTodo(e){\n    //Отменяем перезагрузку страницы\n    e.preventDefault()\n    //изменить state\n    let form = e.target\n    let newTodo = form.todoInput.value\n    //изменить state\n    // .setState((state)=>{.........     return {state}})\n    //обновить state и добавить в items новое дело\n    this.setState( (state)=>{\n      //берем мозг\n      let newState = state\n      //обновляем память items\n      if (newTodo !== \"\") {\n        newState.items.push({text: newTodo})\n      }\n      else {alert(\"нельзя так\")}\n      localStorage.setItem(\"items\", JSON.stringify(newState.items))\n      return {newState}\n  })\n  //очищать input\n  form.todoInput.value = \"\"\n  }\n\n  \n  deleteTodo(e){\n    //Выходим к родителю, берем первый элемент (это наш span)\n    let todoIndex = e.target.parentNode.childNodes[0].innerHTML\n    //обновить состояние state \n    //*********\n    this.setState((state)=>{\n      let newState = state\n      let items = newState.items\n      items.splice(todoIndex-1,1)\n      newState.items = items;\n      localStorage.setItem(\"items\", JSON.stringify(newState.items))\n      return {newState}\n    })\n  }\n\n//рендер нашего компонента\n  render(){\n    let elem=\n    <div id=\"todo-list\" className=\"container-md\">\n      <div className=\"row justify-content-center\">\n        <div className='col-4'>\n          <form className=\"row\" onSubmit={this.addTodo}>\n            <input name=\"todoInput\" type=\"text\" className=\"col form-control\" placeholder=\"Введите дело\"/>\n            <button type='submit' className=\"col-3 btn btn-danger\">button</button>\n          </form>\n        </div>\n      </div>\n      <div className=\"row justify-content-center\">\n        <div className='col-4'>\n          <List itemList={this.state.items} deleteTodo={this.deleteTodo}/>\n        </div>\n      </div>\n    </div>\n    return elem\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n"],"sourceRoot":""}